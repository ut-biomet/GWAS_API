{
  "servers": [
    {
      "url": ""
    }
  ],
  "openapi": "3.0.3",
  "info": {
    "title": "GWAS API",
    "description": "REST API for GWAS analysis",
    "contact": {
      "name": "Laboratory of Biometry and Bioinformatics, Hiroyoshi Iwata",
      "email": "iwata@ut-biomet.org"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/echo": {
      "get": {
        "summary": "Echo back the input",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "msg",
            "description": "The message to echo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "tags": ["Utils"]
      }
    },
    "/version": {
      "get": {
        "summary": "Give information about current API version",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": ["Utils"]
      }
    },
    "/gwas": {
      "post": {
        "summary": "Fit a GWAS model. This endpoint take Urls of geno and pheno data (and values of other GWAS parameters) and write an a json file to the give Url using a PUT request. It had been disign to work with amazon S3 services.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "geno_url",
            "description": "url of the markers data file (.vcf.gz file)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pheno_url",
            "description": "url of the phenotypic data file (csv file)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload_url",
            "description": "url of the PUT request for saving the model",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trait",
            "description": "name of the trait to analyze. Must be a column name of the phenotypic file.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "test",
            "description": "Which test to use. Either `\"score\"`, `\"wald\"` or `\"lrt\"`. For binary phenotypes, test = `\"score\"` is mandatory. For more information about this parameters see: https://www.rdocumentation.org/packages/gaston/versions/1.4.9/topics/association.test",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fixed",
            "description": "Number of Principal Components to include in the model with fixed effect (for test = `\"wald\"` or `\"lrt\"`). Default value is 0. For more information about this parameters see: https://www.rdocumentation.org/packages/gaston/versions/1.4.9/topics/association.test",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "response",
            "description": "Either \"quantitative\" or \"binary\". Is the trait a quantitative or a binary phenotype? Default value is \"quantitative\".",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "quantitative"
            }
          },
          {
            "name": "thresh_maf",
            "description": "Threshold for filtering markers. Only markers with minor allele frequency > `thresh_maf` will be kept for the GWAS analysis. (default 0.05)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0.05
            }
          },
          {
            "name": "thresh_callrate",
            "description": "Threshold for filtering markers. Only markers with a callrate > `thresh_callrate` will be kept.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0.9
            }
          }
        ],
        "tags": ["GWAS"]
      }
    },
    "/adjustedResults": {
      "get": {
        "summary": "Adjusted results. This endpoint calculate the adjusted p-values of the gwas analysis and return all the results or only the significant adjusted p-value. The results are return in json format.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "gwas_url",
            "description": "url of the result file saved by `/gwas` (json file)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adj_method",
            "description": "correction method: \"holm\", \"hochberg\", \"bonferroni\", \"BH\", \"BY\", \"fdr\", \"none\". Default: \"bonferroni\". (see https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/p.adjust for more details)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "bonferroni"
            }
          },
          {
            "name": "filter_pAdj",
            "description": "threshold to remove points with pAdj > filter_pAdj from the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "filter_nPoints",
            "description": "threshold to keep only the filter_nPoints with the lowest p-values for the plot.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1e+100
            }
          },
          {
            "name": "filter_quant",
            "description": "threshold to keep only the filter_quant*100 % of the points with the lowest p-values for the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          }
        ],
        "tags": ["GWAS"]
      }
    },
    "/manplot": {
      "get": {
        "summary": "Identical to `/manplot.html`",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "gwas_url",
            "description": "url of the result file saved by `/gwas` (json file)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adj_method",
            "description": "p-value correction method: \"holm\", \"hochberg\", \"bonferroni\", \"BH\", \"BY\", \"fdr\", \"none\". Default: \"bonferroni\". (see https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/p.adjust for more details)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thresh_p",
            "description": "p value significant threshold (default 0.05)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "chr",
            "description": "names of the chromosomes to show separated using comma. Show all chromosomes if nothing is specified.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter_pAdj",
            "description": "threshold to remove points with pAdj > filter_pAdj from the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "filter_nPoints",
            "description": "threshold to keep only the filter_nPoints with the lowest p-values for the plot.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "filter_quant",
            "description": "threshold to keep only the filter_quant*100 % of the points with the lowest p-values for the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "tags": ["Plots"]
      }
    },
    "/manplot.html": {
      "get": {
        "summary": "Draw a Manhattan plot. This endpoint return the html code of a plotly interactive graph. By default only the 3000 points with the lowest p-values are display on the graph.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "gwas_url",
            "description": "url of the result file saved by `/gwas` (json file)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adj_method",
            "description": "p-value correction method: \"holm\", \"hochberg\", \"bonferroni\", \"BH\", \"BY\", \"fdr\", \"none\". Default: \"bonferroni\". (see https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/p.adjust for more details)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "bonferroni"
            }
          },
          {
            "name": "thresh_p",
            "description": "p value significant threshold (default 0.05)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0.05
            }
          },
          {
            "name": "chr",
            "description": "names of the chromosomes to show separated using comma. Show all chromosomes if nothing is specified.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter_pAdj",
            "description": "threshold to remove points with pAdj > filter_pAdj from the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "filter_nPoints",
            "description": "threshold to keep only the filter_nPoints with the lowest p-values for the plot.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 3000
            }
          },
          {
            "name": "filter_quant",
            "description": "threshold to keep only the filter_quant*100 % of the points with the lowest p-values for the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          }
        ],
        "tags": ["Plots"]
      }
    },
    "/manplot.png": {
      "get": {
        "summary": "Draw a Manhattan plot. This endpoint return png Image of the graph. By default all the points are display on the graph.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response."
          }
        },
        "parameters": [
          {
            "name": "gwas_url",
            "description": "url of the result file saved by `/gwas` (json file)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adj_method",
            "description": "p-value correction method: \"holm\", \"hochberg\", \"bonferroni\", \"BH\", \"BY\", \"fdr\", \"none\". Default: \"bonferroni\". (see https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/p.adjust for more details)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "bonferroni"
            }
          },
          {
            "name": "thresh_p",
            "description": "p value significant threshold (default 0.05)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0.05
            }
          },
          {
            "name": "chr",
            "description": "names of the chromosomes to show separated using comma. Show all chromosomes if nothing is specified.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter_pAdj",
            "description": "threshold to remove points with pAdj > filter_pAdj from the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "filter_nPoints",
            "description": "threshold to keep only the filter_nPoints with the lowest p-values for the plot.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1e+100
            }
          },
          {
            "name": "filter_quant",
            "description": "threshold to keep only the filter_quant*100 % of the points with the lowest p-values for the plot (default no filtering)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          }
        ],
        "tags": ["Plots"]
      }
    },
    "/LDplot": {
      "get": {
        "summary": "Draw a LD plot. This endpoint return a png image.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response."
          }
        },
        "parameters": [
          {
            "name": "geno_url",
            "description": "url of the markers data file (.vcf.gz file)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "description": "lower bound of the range of SNPs for which the LD is computed (`from` must be lower than `to`)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "description": "upper bound of the range of SNPs for which the LD is computed (the total number of SNP should be lower than 50)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": ["Plots"]
      }
    },
    "/pedNetwork": {
      "get": {
        "summary": "Draw interactive pedigree network",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ped_url",
            "description": "url of the pedigree file (.csv)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header",
            "description": "a logical value indicating whether the file contains the names of the variables as its first line. The default value is TRUE. In any cases, the column 1 will be interpreted as the individual id, column 2 as the first parent, column 3 as the second parent.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": true
            }
          },
          {
            "name": "unknown_string",
            "description": "a character vector of strings which are to be interpreted as \"unknown parent\". By default: missing value in the file.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "tags": ["Plots"]
      }
    },
    "/relmat-ped": {
      "post": {
        "summary": "Calculate a pedigree relationship matrix. This endpoint take Urls of a pedigree file and write an a json file to the given Url using a PUT request. It had been disign to work with amazon S3 services.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ped_url",
            "description": "url of the pedigree file (.csv)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload_url",
            "description": "url of the PUT request for saving the results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header",
            "description": "a logical value indicating whether the file contains the names of the variables as its first line. The default value is TRUE. In any cases, the column 1 will be interpreted as the individual id, column 2 as the first parent, column 3 as the second parent.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": true
            }
          },
          {
            "name": "unknown_string",
            "description": "a character vector of strings which are to be interpreted as \"unknown parent\". By default: missing value in the file.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "tags": ["Relationship matrix"]
      }
    },
    "/relmat-geno": {
      "post": {
        "summary": "Calculate a genomic relationship matrix. This endpoint take Urls of a genetic file and write an a json file to the given Url using a PUT request. It had been disign to work with amazon S3 services.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "geno_url",
            "description": "url of the genotype file (`.vcf` or `.vcf.gz`)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload_url",
            "description": "url of the PUT request for saving the results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Relationship matrix"]
      }
    },
    "/relmat-combined": {
      "post": {
        "summary": "Calculate a combined relationship matrix. This endpoint take Urls of a genetic relationship file and a pedigree relationship file and write an a json file to the given Url using a PUT request. It had been disign to work with amazon S3 services.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "genoRelMat_url",
            "description": "url of the genomic relationship matrix file. This url must end by either `.csv` or `.json`",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pedRelMat_url",
            "description": "url of the pedigree relationship matrix file. This url must end by either `.csv` or `.json`",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload_url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Relationship matrix"]
      }
    },
    "/relmat-heatmap.html": {
      "get": {
        "summary": "Draw a heatmap of a relationship matrix.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "relmat_url",
            "description": "url of the relationship matrix file (.json)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Plots"]
      }
    },
    "/relmat-heatmap.png": {
      "get": {
        "summary": "Draw a heatmap of a relationship matrix.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response."
          }
        },
        "parameters": [
          {
            "name": "relmat_url",
            "description": "url of the relationship matrix file (.json)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Plots"]
      }
    },
    "/crossing-simulation": {
      "post": {
        "summary": "Simulate genotypes of progenies of given parents",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "geno_url",
            "description": "url of the phased genotype file of the parents",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "crossTable_url",
            "description": "url of the crossing table data file (`csv` file of 2 or 3 columns). It must contain the names of the variables as its first line. The column 1 and 2 will be interpreted as the parents ids. The optional third column will be interpreted as the offspring base name.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SNPcoord_url",
            "description": "url of the SNPs coordinates file (`csv` file). This `.csv` file should have 4 named columns:\n - `chr`: chromosome name holding the SNP\n - `physPos`: physical position of the SNP on the chromosome\n - `linkMapPos`: linkage map position of the SNP on the chromosome in Morgan\n - `SNPid`: ID of the SNP\n",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nCross",
            "description": "Number of cross to simulate for each parent pair defined in the crossing table.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "upload_url",
            "description": "url of the PUT request for saving the simulated vcf file",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Crossing Simulation"]
      }
    },
    "/progenyBlupCalc": {
      "post": {
        "summary": "Estimate the BLUPs' expected value and variance of the progenies of a given crosses specifyed in the crossing table.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "geno_url",
            "description": "url of the phased genotype file of the parents",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "crossTable_url",
            "description": "url of the crossing table data file (`csv` file of 2 or 3 columns). It must contain the names of the variables as its first line. The column 1 and 2 will be interpreted as the parents ids. The optional third column will be interpreted as the offspring base name.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SNPcoord_url",
            "description": "url of the SNPs coordinates file (`csv` file). This `.csv` file should have 4 named columns:\n - `chr`: chromosome name holding the SNP\n - `physPos`: physical position of the SNP on the chromosome\n - `linkMapPos`: linkage map position of the SNP on the chromosome in Morgan\n - `SNPid`: ID of the SNP\n",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "markerEffects_url",
            "description": "url of the marker effects file (`csv` file). This `.csv` file should have 2 named columns:\\n - `SNPid`: Marker id\\n - `effects`: effect of the corresponding marker\\n",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload_url",
            "description": "url of the PUT request for saving the results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Progenies blups calculation"]
      }
    },
    "/progenyBlup-plot": {
      "get": {
        "summary": "Draw a plot of the progenies BLUPs' expected values with error bars. X axis is the crosses, and Y axis the blups. The points are located at the expected value and the error bar length is the standard deviation.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Default response.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "progenyBlup_url",
            "description": "url of the relationship matrix file (.json)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sorting",
            "description": "method to sort the individuals (X axis) can be:\\n - \"asc\": sort the BLUP expected value in ascending order (from left to right)\\n - \"dec\": sort the BLUP expected value in decreasing order (from left to right)\\n - any other value will sort the individuals in alphabetical order (from left to right)\\n Default is : Alphabetical",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "alphabetical"
            }
          }
        ],
        "tags": ["Plots"]
      }
    }
  },
  "tags": [
    {
      "name": "Utils",
      "description": "Endpoints for checking the API"
    },
    {
      "name": "GWAS",
      "description": "Endpoints related to gwas analysis"
    },
    {
      "name": "Plots",
      "description": "Endpoints related to plots drawn from a GWAS model"
    },
    {
      "name": "Relationship matrix",
      "description": "Endpoints related to relationship matrices"
    },
    {
      "name": "Crossing Simulation",
      "description": "Endpoints related to crossing simulation"
    },
    {
      "name": "Progenies blups calculation",
      "description": "Endpoints related to progenies' blup variance and expected values"
    }
  ]
}
